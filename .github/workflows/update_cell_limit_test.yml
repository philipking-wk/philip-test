name: "Update Account Cell Limit Test"

on:
  workflow_dispatch:
    inputs:
      create_draft:
        description: 'Create draft PR'
        required: false
        type: boolean
        default: false
      jira_ticket_description:
        description: 'Jira ticket description'
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Parse Jira Description
        id: parse-jira
        env:
          JIRA_DESC: ${{ inputs.jira_ticket_description }}
          MANUAL_ENV: ${{ inputs.environment }}
          MANUAL_ACCOUNT: ${{ inputs.account_id }}
          MANUAL_CELL_COUNT: ${{ inputs.new_max_cell_count }}
        run: |
          # Validate that either Jira description or all manual inputs are provided
            echo "Parsing Jira description..."
            
            # Extract Prod Environment (e.g., "Prod Environment: APAC")
            ENVIRONMENT=$(echo "$JIRA_DESC" | grep -i "Prod Environment:" | sed 's/.*Prod Environment:[[:space:]]*\([A-Za-z0-9._-]*\).*/\1/' | tr '[:upper:]' '[:lower:]')
            
            # Extract Workspace ID (e.g., "Workspace ID: QWNjb3VudB8xMDAyNjAwMDQ")
            ACCOUNT_ID=$(echo "$JIRA_DESC" | grep -i "Workspace ID:" | sed 's/.*Workspace ID:[[:space:]]*\([A-Za-z0-9._-]*\).*/\1/')
            
            # Extract Approved cell limit (e.g., "Approved cell limit Evan Leung: 3.5million")
            CELL_LIMIT_TEXT=$(echo "$JIRA_DESC" | grep -i "Approved cell limit" | sed 's/.*Approved cell limit.*:[[:space:]]*\(.*\)/\1/')
            
            # Parse the number (handles "3.5million", "3million", "3.5M", etc.)
            if echo "$CELL_LIMIT_TEXT" | grep -q "million\|M"; then
              # Extract number before "million" or "M"
              NUM=$(echo "$CELL_LIMIT_TEXT" | sed 's/\([0-9]*\.*[0-9]*\).*million.*/\1/' | sed 's/\([0-9]*\.*[0-9]*\).*M.*/\1/')
              # Convert to millions (3.5 -> 3500000)
              if echo "$NUM" | grep -q "\."; then
                # Has decimal point
                INT_PART=$(echo "$NUM" | sed 's/\([0-9]*\)\.[0-9]*/\1/')
                DEC_PART=$(echo "$NUM" | sed 's/[0-9]*\.\([0-9]*\)/\1/')
                CELL_COUNT="${INT_PART}${DEC_PART}000000"
              else
                # No decimal
                CELL_COUNT="${NUM}000000"
              fi
            else
              # No "million" suffix, assume it's already a number
              CELL_COUNT=$(echo "$CELL_LIMIT_TEXT" | tr -cd '0-9')
            fi
            
            # Validate environment mapping (Prod Environment -> GitHub environment name)
            case "$ENVIRONMENT" in
              apac)
                ENVIRONMENT="apac"
                ;;
              eu)
                ENVIRONMENT="eu"
                ;;
              prod)
                ENVIRONMENT="prod"
                ;;
              production)
                ENVIRONMENT="prod"
                ;;
              *)
                ENVIRONMENT="prod"
                ;;
            esac
            
            echo "Parsed values from Jira:"
            echo "  Environment: $ENVIRONMENT"
            echo "  Account ID: $ACCOUNT_ID"
            echo "  Cell Count: $CELL_COUNT"
      
      - name: Run a multi-line script
        env:
          ENV: ${{ steps.parse-jira.outputs.environment }}
          ACCOUNT: ${{ steps.parse-jira.outputs.account_id }}
          CELL_COUNT: ${{ steps.parse-jira.outputs.new_max_cell_count }}
          CREATE_DRAFT: ${{ inputs.create_draft }}
        run: |
          echo "environment: $ENV"
          echo "account_id: $ACCOUNT"
          echo "new_max_cell_count: $CELL_COUNT"
          echo "create_draft: $CREATE_DRAFT"
          ls -la